1. Suggestion: Write a toString() method for the DigitalVideoDisc class. What should be the
return type of this method? 
String
2.Which classes are aggregates of other classes? Checking all constructors of whole classes if they
initialize for their parts?
Classes are aggregates of other classes: Cart, Store, CompactDisc,
3. If the passing object is not an instance of Media, what happens? 
-> the function will return false
 @Override
    public int compareTo(Media other) {
        int titleComparison = this.title.compareTo(other.title);
        if (titleComparison != 0) {
            return titleComparison;
        }
        return Float.compare(other.cost, title.cost);
    }
4.What class should implement the Comparable interface? 
Media
5.In those classes, how should you implement the compareTo()method to reflect the ordering that
we want?
-CompareByTitle:
@Override
    public int compareTo(Media media) {
        int result = this.getTitle().compareTo(media.getTitle());
            if (result == 0) {
                result = Float.compare(media2.getCost(), media1.getCost());
            }
            return result;
    }
-CompareByCost
@Override
    public int compareTo(Media media) {
        int result = Float.compare(media2.getCost(), media1.getCost());
            if (result == 0) {
                result = this.getTitle().compareTo(media.getTitle());
            }
            return result;
    }
6.Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this
Comparable interface approach?
We can not have both two ordering rules of the item.
7.Suppose the DVDs have a different ordering rule from the other media types, that is by title, then
decreasing length, then cost. How would you modify your code to allow this?
@Override
    public int compareTo(Media media) {
        int result = this.getTitle().compareTo(media.getTitle());
            if (result == 0) {
                if (num1 == num2) {
			result=0;
			} else if (num1 < num2) {
  				result=-1;
			} else {
 				result=1;
			}
		if(result==0)result = Float.compare(media2.getCost(), media1.getCost());
            }
            return result;
    }




